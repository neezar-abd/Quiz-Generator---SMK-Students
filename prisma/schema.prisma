// Prisma schema for SMK AI Quiz Generator
// Supports Supabase Postgres with comprehensive quiz management

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Use non-pooled connection for migrations/Studio while app uses PgBouncer via DATABASE_URL
  directUrl = env("DIRECT_URL")
}

// NextAuth.js Schema
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]    // User's quizzes relation
  masteries     UserMastery[]
  answers       UserAnswer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  content     Json
  topic       String
  level       String
  status      QuizStatus @default(DRAFT)
  userId      String   // Foreign key to User
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isPublic    Boolean  @default(false) // For sharing feature
  shareToken  String?  @unique // Random token for public sharing
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations to questions
  mcqQuestions    QuestionMCQ[]
  essayQuestions  QuestionEssay[]
  answers         UserAnswer[] @relation(name: "QuizToUserAnswers")

  @@map("quizzes")
}

// Multiple Choice Question model
model QuestionMCQ {
  id          String   @id @default(cuid())
  question    String
  optionA     String
  optionB     String
  optionC     String
  optionD     String
  answerIndex Int      // 0-3 for A-D
  explanation String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  quizId      String

  // Relations
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     UserAnswer[] @relation(name: "MCQToUserAnswers")

  @@map("question_mcqs")
  @@index([quizId])
}

// Essay Question model
model QuestionEssay {
  id          String   @id @default(cuid())
  question    String
  rubric      String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  quizId      String

  // Relations
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     UserAnswer[] @relation(name: "EssayToUserAnswers")

  @@map("question_essays")
  @@index([quizId])
}

// Enums for type safety
enum QuizLevel {
  X
  XI
  XII
  GENERAL
}

enum QuizStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

// Track per-user mastery for a topic (ELO-like rating + spaced repetition)
model UserMastery {
  id            String    @id @default(cuid())
  userId        String
  topic         String
  rating        Float     @default(1200)
  streak        Int       @default(0)
  totalAnswered Int       @default(0)
  lastReviewedAt DateTime?
  nextReviewAt  DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, topic])
  @@map("user_mastery")
}

// Store every answer event for analytics and repetition scheduling
model UserAnswer {
  id           String       @id @default(cuid())
  userId       String
  quizId       String?
  mcqId        String?
  essayId      String?
  topic        String
  isCorrect    Boolean
  answerIndex  Int?
  timeMs       Int?
  ratingBefore Float?
  ratingAfter  Float?
  createdAt    DateTime     @default(now())

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz         Quiz?        @relation(name: "QuizToUserAnswers", fields: [quizId], references: [id], onDelete: SetNull)
  mcq          QuestionMCQ? @relation(name: "MCQToUserAnswers", fields: [mcqId], references: [id], onDelete: SetNull)
  essay        QuestionEssay? @relation(name: "EssayToUserAnswers", fields: [essayId], references: [id], onDelete: SetNull)

  @@index([userId, topic])
  @@index([quizId])
  @@index([mcqId])
  @@map("user_answers")
}
